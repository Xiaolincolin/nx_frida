# -*- encoding: utf-8 -*-
# @ModuleName: m12_params
# @Function:
# @Author:
# @Time: 2025/7/2 14:12
import base64
from base64 import b64encode

from Cryptodome.Cipher import AES
from Cryptodome.Util.Padding import pad, unpad


def aes_encrypt(plaintext: bytes, key, iv):
    text = pad(plaintext, AES.block_size)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    ct = cipher.encrypt(text)
    return b64encode(ct).decode('utf-8')


def aes_decrypt(ciphertext: bytes, key, iv):
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return unpad(cipher.decrypt(ciphertext), AES.block_size)


def decode_test():
    key_str = "a6 69 b1 56 69 92 21 a7 9c c7 7e ba fa 39 6e d5".replace(' ', '')
    key = bytes.fromhex(key_str)
    iv_str = "28 9b 7f 58 94 c3 44 e0 c6 dd 50 7e 02 66 b3 d2".replace(' ', '')
    iv = bytes.fromhex(iv_str)
    plaintext = base64.b64decode(
        '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'
    )
    ciphertext = aes_decrypt(plaintext, key, iv)
    print(ciphertext.hex())


def encode_test():
    hex_str = "0a94010801121d31373430333334393230303933646437326332636136356233363365311800221030414e443035595158453532424e48302a08322e312e322e3137320e342e3634302e313531302e3231393a13416e64726f69642031332c6c6576656c2033334207506978656c20354a0052005a19636f6d2e71712e652e756e696f6e2e64656d6f2e756e696f6e620477696669680312ab120a00120233351a297b22516d55696e223a223137343033333439323030393364643732633263613635623336336531227d2206676f6f676c652aeb0a6b313a313937302d30352d31373034343935332e3932363636373430362b303830303b6b323a323032342d30342d32383138323333382e3439383333363634332b303830303b6b333a303030303030303030303030303030303b6b343a323035383866653666633236643464613b6b353a32383630313835313b6b363a31333531313637373b6b373a3230353530303b6b383a323931323b6b393a35363762333364652d343634652d343763382d623864372d3538353434303031616631663b6b31313a3234303b6b31323a343b6b31333a323032342d30342d32383138323333382e3439383333363634332b303830303b6b31343a323032352d30322d30393033313930302e3035323738333334352b303830303b6b31353a333231333b6b31363a31363b6b31373a323032352d30322d32343032323135392e3330333438303732392b303830303b6b31383a323032352d30322d32343032323135392e3330333438303732392b303830303b6b31393a313437323139333b6b32303a343b6b32313a323032352d30322d32343032323135392e3330333438303732392b303830303b6b32323a323032352d30322d32343032323135392e3330333438303732392b303830303b6b32333a313437323139343b6b32343a323b6b32353a323032352d30322d32333034323932382e3833333735353938362b303830303b6b32363a313937302d30322d32323139343833322e3037363636363832332b303830303b6b32373a373839303b6b32383a31353b6b32393a3b6b33303a3b6b33313a3b6b33323a3b6b33333a323032342d30342d32383138323333382e3837313637303031342b303830303b6b33343a323032352d30322d30393033313535302e3234323736343433362b303830303b6b33353a343237323b6b33363a32333b6b33373a323032342d30342d32383138323333382e3837313637303031342b303830303b6b33383a323032342d30342d32383138323333382e3837313637303031342b303830303b6b33393a343237313b6b34303a353b6b34313a3b6b34323a3b6b34333a3b6b34343a3b6b34353a323032342d30342d32383138323333322e3830383333363037372b303830303b6b34363a323832363b6b34373a313937302d30352d31373034343935312e3634333333333834352b303830303b6b34383a323032342d30342d32383138323330362e3138353030303039312b303830303b6b34393a323032342d30342d32383138323333322e3835383333363038322b303830303b6b35303a323832383b6b35313a3b6b35323a3b6b35333a3b6b35343a313937302d30352d31373034343935312e3634333333333834352b303830303b6b35353a3130373b6b35363a323831353b6b35373a323832373b6b35383a323032342d30342d32383138323332302e3035383333343830372b303830303b6b35393a323032342d30342d32383138323332302e3035383333343830372b303830303b6b36303a323636373b6b36313a323836303b6b36323a323032342d30342d32383138323333332e3038313636393433372b303830303b6b36333a323834383b6b36343a323032342d30342d32383138323333332e3236353030323738392b303830303b6b36353a323836323b6b36363a3234303b6b36373a323032342d30342d32383138323331302e3132313636373135302b303830303b6b36383a3434393b6b36393a3b6b37303a3132303b6b37313a313937302d30352d31373034343935312e3634363636373137392b303830303b6b37323a3132313b6b37333a313937302d30352d31373034343935312e3634363636373137392b303830303b6b37343a323032342d30342d32383138323331302e3432353030303531342b303830303b6b37353a3b6b31303a3132003a403236656430643534613465346233306466376238613231386363356131386332623331646132313831646534373831383764633237386637323631306134623342004a0052005a006281047b226861726d6f6e79223a2230222c22636c6f6e65223a2230222c22636f6e7461696e65223a22222c226f7a223a2232794f524877732b5a6a66456e71343644495a7a743574336f6d565342375957736f785a306652357353383d222c226f7a32223a22222c226f6f223a2262432b575462616c74344339487452695533325730673d3d222c226b656c6f6e67223a2230222c226970223a223139322e3136382e302e313035222c226d756c746955736572223a2230222c22626f64223a2272656466696e222c22627264223a22676f6f676c65222c226476223a2272656466696e222c2266697273744c6576656c223a223330222c226d616e7566616374223a22476f6f676c65222c226e616d65223a2272656466696e222c22686f7374223a2261626661726d2d72656c656173652d323030342d30313832222c226b65726e656c223a224c696e7578206c6f63616c686f737420342e31392e3236312d676565373466363533343637382d61623934333836343820233120534d5020505245454d5054204d6f6e204465632032362030323a33313a35322055544320323032322061617263683634222c22707265223a2230222c226176223a22342e3634302e313531302e323139222c226368223a22222c22737672223a22222c22666974223a313733373736343632363034352c226a76223a22322e312e322e3137227d6a00720550686f6e657a0a3137333934303835303382010092019802454635444c31583672434c2b55694c65386c69634535475361326f6f3762596152504a396342677a423841544c726f6f664f4f3861344d687954706d4a70583943396c41517a7063774a37667854636e554e67396c2f486c4b774b64346a384a66594e454552575962746979674d764a77514644774d6675506850436479527754324b5239373337526134574d333472442b4d7643726a76526f326c5a44364d64354f6f505336666f4d5765754b3857397a63457a6f39713044684f374b42495538576b507836744e444770623350796338654d53327638393956347149354d736e4f6a46664a547668574b656e6e6845707664656a794a6f53684c433963304c6c6a4a4859322b2f626e42346d2f353957536c38773d3d"
    plaintext = bytes.fromhex(hex_str)
    key_str = "ff 80 20 03 f6 7f 55 be 8b 53 5a 97 b0 1b 45 9d".replace(' ', '')
    key = bytes.fromhex(key_str)
    iv_str = "b8 22 19 69 c2 7a 80 19 d5 33 b1 39 ad e7 1b cc".replace(' ', '')
    iv = bytes.fromhex(iv_str)
    result = aes_encrypt(plaintext, key, iv)
    print(result)


if __name__ == '__main__':
    encode_test()
